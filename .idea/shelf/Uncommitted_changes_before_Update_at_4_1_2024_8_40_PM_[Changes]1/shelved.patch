Index: src/net/handytrack/HANDYTRACKMAIN/RegisterForm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage net.handytrack.HANDYTRACKMAIN;\r\nimport net.handytrack.database.DBmanipulation;\r\nimport net.handytrack.database.DBquery;\r\n\r\nimport java.sql.*;\r\nimport java.awt.*;\r\nimport javax.swing.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.plaf.nimbus.NimbusLookAndFeel;\r\n\r\npublic class RegisterForm {\r\n    private JFrame fr;\r\n    private JTextField firstNameField, lastNameField, phoneNumberField, emailField, usernameField;\r\n    private JPasswordField passwordField, passwordagainField;\r\n    private JButton registerButton, backToLogin;\r\n    private JPanel registerPanel, btnPanel, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13;\r\n    private JLabel job;\r\n\r\n\r\n    public RegisterForm(){\r\n       // Initialize components\r\n        fr = new JFrame(\"Register Form\");\r\n        firstNameField = new JTextField(\"First Name\");\r\n        lastNameField = new JTextField(\"Last Name\");\r\n        phoneNumberField = new JTextField(\"Phone Number\");\r\n        emailField = new JTextField(\"Email\");\r\n        usernameField = new JTextField(\"Username\");\r\n        passwordField = new JPasswordField(\"Password\");\r\n        passwordagainField = new JPasswordField(\"Enter Password Again\");\r\n        registerButton = new JButton(\"Register\");\r\n        backToLogin = new JButton(\"Back to Login\");\r\n        registerPanel = new JPanel();\r\n        p1 = new JPanel();\r\n        p2 = new JPanel();\r\n        p3 = new JPanel();\r\n        p4 = new JPanel();\r\n        p5 = new JPanel();\r\n        p6 = new JPanel();\r\n        p7 = new JPanel();\r\n        p8 = new JPanel();\r\n        p9 = new JPanel();\r\n        p10 = new JPanel();\r\n        p11 = new JPanel();\r\n        p12 = new JPanel();\r\n        p13 = new JPanel();\r\n        job = new JLabel(\"Job Position\");\r\n        job.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        p13.setLayout(new BorderLayout());\r\n            p13.add(job,BorderLayout.WEST);\r\n        String[] items = {\"Delivery Man\", \"Officer\"};\r\n        JComboBox<String> combo;\r\n        combo = new JComboBox<>(items);\r\n\r\n        p2.setPreferredSize(new Dimension(400, 40));\r\n        p3.setPreferredSize(new Dimension(50, 560));\r\n        p4.setPreferredSize(new Dimension(50, 560));\r\n        p5.setPreferredSize(new Dimension(400, 80));\r\n        registerPanel.setPreferredSize(new Dimension(300, 520));\r\n\r\n        // Set text field properties and listeners\r\n        setConFirstNameField(firstNameField);\r\n        setConLastNameField(lastNameField);\r\n        setConPhoneNumberField(phoneNumberField);\r\n        setConEmailField(emailField);\r\n        setConUsernameField(usernameField);\r\n        setConPasswordField(passwordField);\r\n        setConPasswordAgainField(passwordagainField);\r\n        setConJobPosition(combo);\r\n\r\n        // Style GUI\r\n        styleTextField(firstNameField);\r\n        styleTextField(lastNameField);\r\n        styleTextField(phoneNumberField);\r\n        styleTextField(emailField);\r\n        styleTextField(usernameField);\r\n        styleTextField(passwordField);\r\n        styleTextField(passwordagainField);\r\n        stylePanel(p1);\r\n        stylePanel(p2);\r\n        stylePanel(p3);\r\n        stylePanel(p4);\r\n        stylePanel(p5);\r\n        stylePanel(registerPanel);\r\n        stylePanelRegisPanel(p6);\r\n        stylePanelRegisPanel(p7);\r\n        stylePanelRegisPanel(p8);\r\n        stylePanelRegisPanel(p9);\r\n        stylePanelRegisPanel(p10);\r\n        stylePanelRegisPanel(p11);\r\n        stylePanelRegisPanel(p12);\r\n        stylePanelRegisPanel(p13);\r\n        styleButton(backToLogin);\r\n        backToLogin.setBackground(new Color(210, 224, 251));\r\n        styleButton(registerButton);\r\n\r\n        registerPanel.setSize(400, 300);\r\n        registerPanel.setLayout(new GridLayout(15, 1));\r\n        registerPanel.add(firstNameField);\r\n        registerPanel.add(p6);\r\n        registerPanel.add(lastNameField);\r\n        registerPanel.add(p7);\r\n        registerPanel.add(phoneNumberField);\r\n        registerPanel.add(p8);\r\n        registerPanel.add(emailField);\r\n        registerPanel.add(p9);\r\n        registerPanel.add(usernameField);\r\n        registerPanel.add(p11);\r\n        registerPanel.add(passwordField);\r\n        registerPanel.add(p12);\r\n        registerPanel.add(passwordagainField);\r\n        registerPanel.add(p13);\r\n        registerPanel.add(combo);\r\n\r\n        p5.add(backToLogin);p5.add(registerButton);\r\n        p1.setLayout(new BorderLayout());\r\n            p1.add(p2,BorderLayout.NORTH);\r\n        p1.add(p3,BorderLayout.WEST);p1.add(registerPanel,BorderLayout.CENTER);p1.add(p4,BorderLayout.EAST);\r\n            p1.add(p5,BorderLayout.SOUTH);\r\n\r\n        fr.add(p1);\r\n        fr.setLocation(900, 200);\r\n        fr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        fr.setSize(400, 680);\r\n        fr.setResizable(false);\r\n        fr.setVisible(true);\r\n        //back to login action listener\r\n        backToLogin.addActionListener(new ActionListener(){\r\n            @Override\r\n            public void actionPerformed(ActionEvent e){\r\n                if (e.getSource()==backToLogin){\r\n                    new LoginEdit();\r\n                    fr.dispose();\r\n                }\r\n            }\r\n        });\r\n        // Register button action listener\r\n        registerButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) { // Check conditions and perform registration\r\n                if (isValidRegistration()) {\r\n                    String firstName = firstNameField.getText();\r\n                    String lastName = lastNameField.getText();\r\n                    String phoneNumber = phoneNumberField.getText();\r\n                    String email = emailField.getText();\r\n                    String username = usernameField.getText();\r\n                    String password = String.valueOf(passwordField.getPassword());\r\n                    String selectedPosition = (String) combo.getSelectedItem();\r\n                    try {\r\n                        String sql = String.format(\"INSERT INTO login(name, surename, tel, email, username, password, jobposition) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')\",firstName,lastName,phoneNumber,email,username,password,selectedPosition);\r\n                        DBmanipulation.getInstance().getUpdate(sql);\r\n                    } catch (Exception ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                    // Perform registration process\r\n                    JOptionPane.showMessageDialog(fr, \"Registration successful!\", \"Success\", JOptionPane.INFORMATION_MESSAGE);\r\n                } else {\r\n                    // Display error message if registration conditions are not met\r\n                    JOptionPane.showMessageDialog(fr, \"Failed to register.\", \"Error\", JOptionPane.ERROR_MESSAGE);\r\n                    //check error\r\n                    checkEmptyAndInvalidFields();\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n    private void setConFirstNameField(JTextField tf) {\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if(tf.getText().equals(\"First Name\") || tf.getText().equals(\"***Please fill the First Name***\")){\r\n                    tf.setCaretPosition(0);\r\n                }\r\n            }\r\n            public void focusLost(){}\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (tf.getText().isEmpty() || tf.getText().equals(\"***Please fill the First Name***\")) {\r\n                    tf.setText(\"First Name\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if(tf.getText().equals(\"First Name\") || tf.getText().equals(\"***Please fill the First Name***\")){\r\n                    tf.setText(\"\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            public void keyReleased(){}\r\n            public void keyPressed(){}\r\n        });\r\n\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                lastNameField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConLastNameField(JTextField tf) {\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if(tf.getText().equals(\"Last Name\") || tf.getText().equals(\"***Please fill the Last Name***\")){\r\n                    tf.setCaretPosition(0);\r\n                }\r\n            }\r\n            public void focusLost(){}\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (tf.getText().isEmpty() || tf.getText().equals(\"***Please fill the Last Name***\")) {\r\n                    tf.setText(\"Last Name\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if(tf.getText().equals(\"Last Name\") || tf.getText().equals(\"***Please fill the Last Name***\")){\r\n                    tf.setText(\"\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            public void keyReleased(){}\r\n            public void keyPressed(){}\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                phoneNumberField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConPhoneNumberField(JTextField tf) {\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if(tf.getText().equals(\"Phone Number\") || tf.getText().equals(\"***Please fill the Phone Number***\") || tf.getText().equals(\"***Invalid Phone Number***\")){\r\n                    tf.setCaretPosition(0);\r\n                }\r\n            }\r\n            public void focusLost(){}\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (tf.getText().isEmpty() || tf.getText().equals(\"***Please fill the Phone Number***\") || tf.getText().equals(\"***Invalid Phone Number***\")) {\r\n                    tf.setText(\"Phone Number\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if(tf.getText().equals(\"Phone Number\") || tf.getText().equals(\"***Please fill the Phone Number***\") || tf.getText().equals(\"***Invalid Phone Number***\")){\r\n                    tf.setText(\"\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            public void keyReleased(){}\r\n            public void keyPressed(){}\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                emailField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConEmailField(JTextField tf) {\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if(tf.getText().equals(\"Email\") || tf.getText().equals(\"***Please fill the Email***\") || tf.getText().equals(\"***Invalid Email***\")){\r\n                    tf.setCaretPosition(0);\r\n                }\r\n            }\r\n            public void focusLost(){}\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (tf.getText().isEmpty() || tf.getText().equals(\"***Please fill the Email***\") || tf.getText().equals(\"***Invalid Email***\")) {\r\n                    tf.setText(\"Email\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if(tf.getText().equals(\"Email\") || tf.getText().equals(\"***Please fill the Email***\") || tf.getText().equals(\"***Invalid Email***\")){\r\n                    tf.setText(\"\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            public void keyReleased(){}\r\n            public void keyPressed(){}\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                usernameField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConUsernameField(JTextField tf) {\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if(tf.getText().equals(\"Username\") || tf.getText().equals(\"***Please fill the Username***\")){\r\n                    tf.setCaretPosition(0);\r\n                }\r\n            }\r\n            public void focusLost(){}\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (tf.getText().isEmpty() || tf.getText().equals(\"***Please fill the Username***\")) {\r\n                    tf.setText(\"Username\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if(tf.getText().equals(\"Username\") || tf.getText().equals(\"***Please fill the Username***\")){\r\n                    tf.setText(\"\");\r\n                    tf.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n            public void keyReleased(){}\r\n            public void keyPressed(){}\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                passwordField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConPasswordField(JTextField tf) {\r\n        passwordField.setEchoChar((char) 0);\r\n        tf.setText(\"Password\");\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (String.valueOf(passwordField.getPassword()).equals(\"Password\") || String.valueOf(passwordField.getPassword()).equals(\"***Please fill the Password***\") || String.valueOf(passwordField.getPassword()).equals(\"***Invalid Password***\")) {\r\n                    passwordField.setCaretPosition(0);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (String.valueOf(passwordField.getPassword()).isEmpty() || String.valueOf(passwordField.getPassword()).equals(\"***Please fill the Password***\") || String.valueOf(passwordField.getPassword()).equals(\"***Invalid Password***\")) {\r\n                    passwordField.setEchoChar((char) 0);\r\n                    passwordField.setText(\"Password\");\r\n                    passwordField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if (String.valueOf(passwordField.getPassword()).equals(\"Password\") || String.valueOf(passwordField.getPassword()).equals(\"***Please fill the Password***\") || String.valueOf(passwordField.getPassword()).equals(\"***Invalid Password***\")) {\r\n                    passwordField.setText(\"\");\r\n                    passwordField.setEchoChar('\\u25cf');\r\n                    passwordField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                passwordagainField.requestFocusInWindow();\r\n            }\r\n        });\r\n    }\r\n    private void setConPasswordAgainField(JTextField tf) {\r\n        passwordagainField.setEchoChar((char) 0);passwordagainField.setText(\"Enter Password Again\");\r\n        passwordagainField.setEchoChar((char) 0);\r\n        tf.addFocusListener(new FocusAdapter() {\r\n            @Override\r\n            public void focusGained(FocusEvent e) {\r\n                if (String.valueOf(passwordagainField.getPassword()).equals(\"Enter Password Again\") || String.valueOf(passwordagainField.getPassword()).equals(\"***Please fill the Password Again***\") || String.valueOf(passwordagainField.getPassword()).equals(\"***Passwords doesn't match***\")) {\r\n                    passwordagainField.setCaretPosition(0);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void focusLost(FocusEvent e) {\r\n                if (String.valueOf(passwordagainField.getPassword()).isEmpty() || String.valueOf(passwordagainField.getPassword()).equals(\"***Please fill the Password Again***\") || String.valueOf(passwordagainField.getPassword()).equals(\"***Passwords doesn't match***\")) {\r\n                    passwordagainField.setEchoChar((char) 0);\r\n                    passwordagainField.setText(\"Enter Password Again\");\r\n                    passwordagainField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n\r\n        tf.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyPressed(KeyEvent e) {\r\n                if (String.valueOf(passwordagainField.getPassword()).equals(\"Enter Password Again\") || String.valueOf(passwordagainField.getPassword()).equals(\"***Please fill the Password Again***\") || String.valueOf(passwordagainField.getPassword()).equals(\"***Passwords doesn't match***\")) {\r\n                    passwordagainField.setText(\"\");\r\n                    passwordagainField.setEchoChar('\\u25cf');\r\n                    passwordagainField.setForeground(Color.BLACK);\r\n                }\r\n            }\r\n        });\r\n        tf.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                registerButton.doClick();\r\n            }\r\n        });\r\n    }\r\n    private void setConJobPosition(JComboBox cm){\r\n        cm.addActionListener(e -> {\r\n            String selectedPosition = (String) cm.getSelectedItem();\r\n            if (selectedPosition == null || selectedPosition.isEmpty()) {\r\n                JOptionPane.showMessageDialog(null, \"Please select a job position.\", \"Error\", JOptionPane.ERROR_MESSAGE);\r\n                cm.setSelectedIndex(-1);\r\n            }\r\n        });\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            UIManager.setLookAndFeel(new NimbusLookAndFeel());\r\n        } catch (UnsupportedLookAndFeelException e) {\r\n            e.printStackTrace();\r\n        }\r\n        new RegisterForm();\r\n\r\n    }\r\n\r\n    //check empty all field\r\n    private boolean isEmptyFirstNameField(JTextField tf) {\r\n        return tf.getText().equals(\"First Name\")||tf.getText().equals(\"***Please fill the First Name***\");\r\n    }\r\n    private boolean isEmptyLasttNameField(JTextField tf) {\r\n        return tf.getText().equals(\"Last Name\")||tf.getText().equals(\"***Please fill the Last Name***\");\r\n    }private boolean isEmptyPhoneField(JTextField tf) {\r\n        return tf.getText().equals(\"Phone Number\")||tf.getText().equals(\"***Please fill the Phone Number***\");\r\n    }private boolean isEmptyEmailField(JTextField tf) {\r\n        return tf.getText().equals(\"Email\")||tf.getText().equals(\"***Please fill the Email***\");\r\n    }private boolean isEmptyUsernameField(JTextField tf) {\r\n        return tf.getText().equals(\"Username\")||tf.getText().equals(\"***Please fill the Username***\");\r\n    }private boolean isEmptyPasswordField(JTextField tf) {\r\n        return tf.getText().equals(\"Password\")||tf.getText().equals(\"***Please fill the Password***\");\r\n    }private boolean isEmptyPasswordAgainField(JTextField tf) {\r\n        return tf.getText().equals(\"Enter Password Again\")||tf.getText().equals(\"***Please fill the Password Again***\");\r\n    }\r\n    //check invalid\r\n    private boolean isValidPhoneNumber(String phoneNumber) {\r\n        return phoneNumber.matches(\"^0\\\\d{9}$\");\r\n    }\r\n    private boolean isValidEmail(String email) {\r\n        String emailRegex = \"^[a-zA-Z0-9+_\\\\-\\\\.]+@[a-zA-Z0-9+\\\\-]+\\\\.[a-zA-Z]{2,7}$\";\r\n        return email.matches(emailRegex);\r\n    }\r\n    private boolean hasLowerCase(String password) {\r\n        return password.matches(\".*[a-z].*\");\r\n    }\r\n\r\n    private boolean hasUpperCase(String password) {\r\n        return password.matches(\".*[A-Z].*\");\r\n    }\r\n\r\n    private boolean hasDigit(String password) {\r\n        return password.matches(\".*\\\\d.*\");\r\n    }\r\n\r\n    private boolean hasSpecialChar(String password) {\r\n        return password.matches(\".*[@#$%^&+=!_].*\");\r\n    }\r\n\r\n    private boolean hasMinLength(String password) {\r\n        return password.length() >= 8;\r\n    }\r\n    private boolean isValidPasswordField(JPasswordField passwordField) {\r\n        char[] passwordChars = passwordField.getPassword();\r\n        String password = new String(passwordChars);\r\n        // Explanation of regex:\r\n        // ^                 Start of string\r\n        // (?=.*[a-z])       At least one lowercase letter\r\n        // (?=.*[A-Z])       At least one uppercase letter\r\n        // (?=.*\\\\d)         At least one digit\r\n        // (?=.*[@#$%^&+=!_]) At least one special character from the given list\r\n        // .{8,}             Minimum length of 8 characters\r\n        // $                 End of string\r\n        return hasLowerCase(password) &&\r\n                hasUpperCase(password) &&\r\n                hasDigit(password) &&\r\n                hasSpecialChar(password) &&\r\n                hasMinLength(password);\r\n    }\r\n    private boolean passwordFieldMatches(JPasswordField passwordField1, JPasswordField passwordField2) {\r\n        return String.valueOf(passwordField1.getPassword()).equals(String.valueOf(passwordField2.getPassword()));\r\n    }\r\n    private boolean isUsernameDuplicate(String username) {\r\n        // Connect to the database and check if username exists\r\n        String sql = String.format(\"SELECT * FROM login WHERE username = '%s'\", username);\r\n        ResultSet rs = DBquery.getInstance().getSelect(sql);\r\n        Boolean b = null;\r\n        try {\r\n            if (rs.next()){\r\n                if (username.equals(rs.getString(\"username\"))){\r\n                     b = true;\r\n                }\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n             b = false;\r\n        } finally {\r\n            DBquery.getInstance().disconnect(); // Disconnect from the database\r\n        }\r\n        return b;\r\n    }\r\n    private boolean isValidRegistration() {\r\n        // Check if all fields are filled correctly\r\n        return !isEmptyFirstNameField(firstNameField) &&\r\n               !isEmptyLasttNameField(lastNameField) &&\r\n               !isEmptyPhoneField(phoneNumberField) &&\r\n               !isEmptyEmailField(emailField) &&\r\n               !isEmptyUsernameField(usernameField) &&\r\n               !isEmptyPasswordField(passwordField) &&\r\n               !isEmptyPasswordAgainField(passwordagainField)&&\r\n               isValidPhoneNumber(phoneNumberField.getText()) &&\r\n               isValidEmail(emailField.getText()) &&\r\n               isValidPasswordField(passwordField) &&\r\n               isValidPasswordField(passwordagainField) &&\r\n               passwordFieldMatches(passwordField, passwordagainField) &&\r\n               !isUsernameDuplicate(usernameField.getText());  // Check if username is not duplicate\r\n    }\r\n    private void checkEmptyAndInvalidFields() {\r\n        if (isEmptyFirstNameField(firstNameField)) {\r\n            firstNameField.setText(\"***Please fill the First Name***\");\r\n            firstNameField.setForeground(Color.red);\r\n        }\r\n        if (isEmptyLasttNameField(lastNameField)) {\r\n            lastNameField.setText(\"***Please fill the Last Name***\");\r\n            lastNameField.setForeground(Color.red);\r\n        }\r\n        if (isEmptyPhoneField(phoneNumberField)) {\r\n            phoneNumberField.setText(\"***Please fill the Phone Number***\");\r\n            phoneNumberField.setForeground(Color.red);\r\n        }\r\n        else{\r\n            if (!isValidPhoneNumber(phoneNumberField.getText())) {\r\n                phoneNumberField.setText(\"***Invalid Phone Number***\");\r\n                phoneNumberField.setForeground(Color.red);\r\n            }\r\n        }\r\n        if (isEmptyEmailField(emailField)) {\r\n            emailField.setText(\"***Please fill the Email***\");\r\n            emailField.setForeground(Color.red);\r\n        }\r\n        else{\r\n            if (!isValidEmail(emailField.getText())) {\r\n                emailField.setText(\"***Invalid Email***\");\r\n                emailField.setForeground(Color.red);\r\n            }\r\n        }\r\n        if (isEmptyUsernameField(usernameField)) {\r\n            usernameField.setText(\"***Please fill the Username***\");\r\n            usernameField.setForeground(Color.red);\r\n        }\r\n        else{\r\n            if (isUsernameDuplicate(usernameField.getText())) {\r\n            JOptionPane.showMessageDialog(fr, \"Username already exists.\", null, JOptionPane.WARNING_MESSAGE);\r\n        }\r\n        }\r\n        if (isEmptyPasswordField(passwordField)) {\r\n            passwordField.setEchoChar((char) 0);\r\n            passwordField.setText(\"***Please fill the Password***\");\r\n            passwordField.setForeground(Color.red);\r\n        }\r\n        else{\r\n            if (!isValidPasswordField(passwordField)) {\r\n                passwordField.setEchoChar((char) 0);\r\n                passwordField.setText(\"***Invalid Password***\");\r\n                JOptionPane.showMessageDialog(fr, \"Password should contain at least 8 character with aA-zZ,0-9,and special charactor\", null, JOptionPane.WARNING_MESSAGE);\r\n                passwordField.setForeground(Color.red);\r\n            }\r\n        }\r\n        if (isEmptyPasswordAgainField(passwordagainField)) {\r\n            passwordagainField.setEchoChar((char) 0);\r\n            passwordagainField.setText(\"***Please fill the Password Again***\");\r\n            passwordagainField.setForeground(Color.red);\r\n        }\r\n        else{\r\n            if (!passwordFieldMatches(passwordField, passwordagainField)) {\r\n                passwordagainField.setEchoChar((char) 0);\r\n                passwordagainField.setText(\"***Passwords doesn't match***\");\r\n                passwordagainField.setForeground(Color.red);\r\n            }\r\n        }\r\n\r\n    }\r\n    private void styleTextField(JTextField tf){\r\n        tf.setOpaque(false);\r\n        tf.setForeground(Color.BLACK); // Set text color\r\n        tf.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK)); // Bottom border only\r\n        tf.setFont(new Font(\"Arial\", Font.PLAIN, 12));\r\n    }\r\n    private void stylePanel(JPanel p){\r\n        p.setOpaque(true);\r\n        p.setBackground(new Color(210, 224, 251));\r\n        p.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.BLACK)); // Bottom border only\r\n\r\n    }\r\n    private void stylePanelRegisPanel(JPanel p){\r\n        p.setPreferredSize(new Dimension(300, 40));\r\n        p.setOpaque(true);\r\n        p.setBackground(new Color(210, 224, 251));\r\n        p.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.BLACK));\r\n    }\r\n    private void styleButton(JButton b){\r\n        b.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        b.setBackground(Color.BLACK);\r\n        b.setForeground(Color.ORANGE); // Set text color\r\n        b.setPreferredSize(new Dimension(150, 40));\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/net/handytrack/HANDYTRACKMAIN/RegisterForm.java b/src/net/handytrack/HANDYTRACKMAIN/RegisterForm.java
--- a/src/net/handytrack/HANDYTRACKMAIN/RegisterForm.java	
+++ b/src/net/handytrack/HANDYTRACKMAIN/RegisterForm.java	
@@ -508,20 +508,21 @@
         // Connect to the database and check if username exists
         String sql = String.format("SELECT * FROM login WHERE username = '%s'", username);
         ResultSet rs = DBquery.getInstance().getSelect(sql);
-        Boolean b = null;
+        Boolean a =false;
         try {
             if (rs.next()){
-                if (username.equals(rs.getString("username"))){
-                     b = true;
+                if (username.equals(rs.getString("username"))) {
+                    a = true;
                 }
 
             }
-        } catch (SQLException e) {
-             b = false;
-        } finally {
-            DBquery.getInstance().disconnect(); // Disconnect from the database
+        } catch(SQLException e) {
+
+
+        }finally {
+
         }
-        return b;
+        return a;
     }
     private boolean isValidRegistration() {
         // Check if all fields are filled correctly
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	
+++ /dev/null	
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	
+++ /dev/null	
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/dataSources.xml
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
deleted file mode 100644
--- a/.idea/dataSources.xml	
+++ /dev/null	
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
-    <data-source source="LOCAL" name="DB" uuid="5a0904ec-ddbe-4c7f-9894-761d4cb991cd">
-      <driver-ref>sqlite.xerial</driver-ref>
-      <synchronize>true</synchronize>
-      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>
-      <jdbc-url>jdbc:sqlite:C:\Users\pleum\IdeaProjects\HandyTrack\resources\DB.db</jdbc-url>
-      <jdbc-additional-properties>
-        <property name="com.intellij.clouds.kubernetes.db.enabled" value="false" />
-      </jdbc-additional-properties>
-      <working-dir>$ProjectFileDir$</working-dir>
-      <libraries>
-        <library>
-          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>
-        </library>
-        <library>
-          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>
-        </library>
-      </libraries>
-    </data-source>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/encodings.xml
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
--- a/.idea/encodings.xml	
+++ /dev/null	
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="file://$PROJECT_DIR$/src" charset="UTF-8" />
-    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/dataSources.local.xml
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
deleted file mode 100644
--- a/.idea/dataSources.local.xml	
+++ /dev/null	
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="dataSourceStorageLocal" created-in="IU-233.15026.9">
-    <data-source name="DB" uuid="5a0904ec-ddbe-4c7f-9894-761d4cb991cd">
-      <database-info product="SQLite" version="3.45.1" jdbc-version="4.2" driver-name="SQLite JDBC" driver-version="3.45.1.0" dbms="SQLITE" exact-version="3.45.1" exact-driver-version="3.45">
-        <identifier-quote-string>&quot;</identifier-quote-string>
-      </database-info>
-      <case-sensitivity plain-identifiers="mixed" quoted-identifiers="mixed" />
-      <auth-provider>no-auth</auth-provider>
-      <schema-mapping>
-        <introspection-scope>
-          <node kind="schema" qname="@" />
-        </introspection-scope>
-      </schema-mapping>
-    </data-source>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	
+++ /dev/null	
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="MavenProjectsManager">
-    <option name="originalFiles">
-      <list>
-        <option value="$PROJECT_DIR$/pom.xml" />
-      </list>
-    </option>
-  </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
